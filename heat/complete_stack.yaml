heat_template_version: queens

description: >
  This stack is an entry point for virtual infra creaton that includes 1 LR, ifcount of Instances located on kernel compute.
  and ifcount of instances located on SRIOV compute. The number of netowrks is "ifcount + 1" for graphical representation of
  how instaces are connected to nework see README.md
parameters:
  flavor:
    type: string
    description: name of flavor
    default: small
  image:
    type: string
    description: name of image
    default: cirros
  tenant_name:
    type: string
    description: name of the tenant
    default: tenant1
  lr_name:
    type: string
    description: name of a logical router to create
    default: LR1
  ifcount:
    type: number
    description: count of networks to create
    default: 10
  phys_routers:
    type: comma_delimited_list
    description: count of networks to create
    default: default-global-system-config:DC1_LEAF-1, default-global-system-config:DC1_LEAF-2

resources:
  network_count:
    type: OS::Heat::Value
    properties:
      type: string
      value:
        yaql:
          expression: $.data.ifcount + 1
          data:
            ifcount: {get_param: ifcount}

# this is the entry point for creation of VNs that instances will be connected to 
  network:
    type: networks_stack_contrail.yaml
    properties:
      ifcount: { get_attr: [network_count, value] }
      lr_name: {get_param: lr_name}
      tenant_name: {get_param: tenant_name}

# this is the entry point for creation of instances, it gets the list of networks
# and sriov ports created by network resource
  all_servers:
    type: OS::Heat::ResourceGroup
    update_policy:
      batch_create:
        max_batch_size: 10
    properties:
      count: { get_param: ifcount }
      index_var: INDEX
      resource_def:
        type: single_server.yaml
        properties:
          all_networks: {get_attr: [network, network_name]}
          all_sriov_ports: {get_attr: [network, sriov_port_pairs]}
          index: INDEX
          image_id: {get_param: image}
          instance_type: {get_param: flavor}

# a single router is created here that is attatched to all VNs created by network resource
  logical_router:
    type: OS::ContrailV2::LogicalRouter
    properties:
      name: { get_param: lr_name }
      # this enables us to create LR that can be extended to physical routers
      logical_router_type: "vxlan-routing"
      virtual_machine_interface_refs: {get_attr: [network, vmis]}
      physical_router_refs: { get_param: phys_routers }
